1.	JVM이란 무엇인가
• JVM이란, 자바 가상 머신의 약자를 줄여 부르는 용어이다.
자바 프로그램에서는 이 JVM을 사용하여 프로그램을 돌린다. 왜 그럴까?? 일반적인 프로그램은 Windows또는 Linux같은 OS 위에서 실행된다. 하지만 자바 프로그램 같은 경우에는 OS 위의 JVM에서 실행이된다. 이렇게 JVM위에서 굳이 자바 프로그램을 돌리는 이유는 자바 프로그램을 OS에 상관없이 실행시키기 위함이다. 예를들어 Windows에서 동작하도록 구현된 워드 프로그램은 Linux에서 동작하지 않는다. 이 워드 프로그램을 Mac환경에서 돌리기 위해서는 Mac기반으로 다시 구현해야 한다. 하지만 자바 프로그램 같은 경우 어떤 OS 에서도 그에 맞는 JVM 다운로드를 통해 자바 프로그램을 실행 실킬 수 있다.

2.	JVM 역할
•	자바 애플리케이션을 클래스 로더를 통해 읽어 들여 자바 API와 함께 실행하는 것이다.
•	JVM은 자바와 OS사이에서 중개자 역할을 수행하여 OS에 독립적인 플랫폼을 갖게 해준다. 즉 OS 의 메모리 영역에 직접적으로 접근하지 않고 JVM 이라는 가상 머신을 이용해서 간접적으로 접근한다.
•	JVM은 프로그램의 메모리 관리를 알아서 해준다. C프로그램 같은 경우에는 직접 메모리 할당을 해주고 해지해줘야한다. 하지만 자바에서는 JVM이 자동으로 메모리 관리를 해주는 장점이 있다.

3.	컴파일 하는 방법 & 실행하는 방법
•	프로그램이 실행되면 JVM은 OS로부터 이 프로그램이 필요로 하는 메모리를 할당받는다. JVM은 이 메모리를 용도에 맞게 여러 영역으로 나누어 관리한다.
•	자바 컴파일러(javac)가 자바 소스코드(.java)를 읽어들여 자바 바이트코드(.class)로 변환시킨다.
•	클래스 로더를 통해 class 파일들을 JVM으로 로딩한다.
•	로딩된 class 파일들은 Execution engine을 통해 해석된다.
•	해석된 바이트코드(.class)는 Runtime Data Areas에 배치되고 수행이 이루어지게 된다. 이러한 과정속에서 JVM은 필요에 따라 GC 같은 관리 작업을 수행한다.
•	 

4.	바이트코드란 무엇인가
• 바이트코드(Bytecode, portable code, p-code)는 특정 하드웨어가 아닌 가상 컴퓨터에서 돌아가는 실행 프로그램을 위한 이진 표현법이다. 하드웨어가 아닌 소프트웨어에 의해 처리되기 때문에, 보통 기계어보다 더 추상적이다.

5.	JIT 컴파일러란 무엇이며 어떻게 동작하는지
• JIT 컴파일러는 프로그램을 실제 실행하는 시점에(실시간에) 기계어로 번역하는 컴파일 기법이다.
JIT 컴파일러는 같은 코드를 매번 해석하지 않고 실행할 때 컴파일을 하면서 해당 코드를 캐싱한다. 이후엔, 바뀐 부분만 컴파일 하고 나머지는 캐싱된 코드를 사용 하는 것 그래서 인터프리터의 속도를 개선 할 수 있다.

6.	JVM 구성 요소
• Class Loader
JVM 내로 클래스 파일을 load하고 link를 통해 배치를 수행하는 모듈로 Runtime 시에 동적으로 클래스를 로드한다. 
자바는 동적 코드, 컴파일 타임이 아니라 런타임에 참조한다.
즉, 클래스를 처음으로 참조할 때 해당 클래스를 load하고 link한다.
 
• Execution Engine
class loader를 통해 배치된 클래스를 실행시킨다.
클래스 파일(바이트 코드)은 비교적 인간이 보기 쉬운 형태이기 때문에 기계가 실행할 수 있는 형태로 변경시키는데
이 때, 두 가지 방식을 사용한다. ( 인터프리터, JIT )
 
• Interpreter
실행 엔진은 바이트 코드를 명령어 단위로 실행한다.
이는 한 줄 씩 수행하기 때문에 느리다는 단점을 가지고 있다.
 
• JIT (Just In Time) Compiler
Interpreter 방식의 단점을 보완하기 위해 도입된 방식으로,
Interpreter 방식으로 실행하다가 적절한 시점에 바이트 코드 전체를 컴파일 하여 네이티브 코드로 변경하고,
더 이상 Interpreting 하지 않고 네이티브 코드로 직접 실행하는 방식이다.
네이티브 코드는 캐시에 보관되기 때문에 한 번 컴파일된 코드는 빠르게 실행할 수 있다.
물론 한 번만 실행되는 코드라면 JIT 보다 Interpreter 방식이 유리하다.
따라서 JVM은 해당 메소드가 얼마나 자주 수행되는지 체크하고, 일정 정도를 넘을 때 컴파일을 수행한다.
 
• Garbage Collector
동적으로 할당된 메모리 중 사용되지 않는 메모리를 반환한다.
실행 시기는 JVM이 OS에 메모리를 추가적으로 요청했을 때 실행되고,
24시간 내내 돌아가는 서버 프로그램의 경우, JVM이 한가한 시점에 실행된다.
 

7.	JDK와 JRE의 차이
• JRE는 Java 애플리케이션을 실행하는 데 필요한 환경 (표준 라이브러리 및 JVM)입니다. JDK는 개발자 도구 및 설명서가 포함 된 JRE입니다. JDK와 JRE의 차이점은 JDK는 Java 용 소프트웨어 개발 키트이고 JRE는 프로그램을 실행하는 장소.


출처:
https://wiserloner.tistory.com/542
https://hoonmaro.tistory.com/19
https://longbeom.tistory.com/15
https://medium.com/@ahn428/java-jit-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC-c7d068e29f45
https://ko.wikipedia.org/wiki/JIT_%EC%BB%B4%ED%8C%8C%EC%9D%BC
https://ko.wikipedia.org/wiki/%EB%B0%94%EC%9D%B4%ED%8A%B8%EC%BD%94%EB%93%9C

